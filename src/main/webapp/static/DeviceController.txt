package com.yihuacomputer.fish.web.basic.device;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.RandomAccessFile;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.annotation.PostConstruct;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFDataFormat;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.yihuacomputer.common.FishCfg;
import com.yihuacomputer.common.FishConstant;
import com.yihuacomputer.common.IFilter;
import com.yihuacomputer.common.IPageResult;
import com.yihuacomputer.common.ITypeIP;
import com.yihuacomputer.common.exception.AppException;
import com.yihuacomputer.common.exception.NotFoundException;
import com.yihuacomputer.common.filter.Filter;
import com.yihuacomputer.common.jackson.JsonUtils;
import com.yihuacomputer.common.util.DateUtils;
import com.yihuacomputer.common.util.EntityUtils;
import com.yihuacomputer.common.util.IP;
import com.yihuacomputer.common.util.StringUtils;
import com.yihuacomputer.fish.api.atm.IAtmType;
import com.yihuacomputer.fish.api.atm.IAtmTypeService;
import com.yihuacomputer.fish.api.device.AwayFlag;
import com.yihuacomputer.fish.api.device.CareLevel;
import com.yihuacomputer.fish.api.device.CashType;
import com.yihuacomputer.fish.api.device.IDevice;
import com.yihuacomputer.fish.api.device.IDeviceExtend;
import com.yihuacomputer.fish.api.device.IDeviceExtendService;
import com.yihuacomputer.fish.api.device.IDeviceMaintainOrg;
import com.yihuacomputer.fish.api.device.IDeviceMaintainOrgService;
import com.yihuacomputer.fish.api.device.IDeviceService;
import com.yihuacomputer.fish.api.device.PlaceType;
import com.yihuacomputer.fish.api.device.SetupType;
import com.yihuacomputer.fish.api.device.Status;
import com.yihuacomputer.fish.api.device.WorkType;
import com.yihuacomputer.fish.api.jsnx.IDeviceBatch;
import com.yihuacomputer.fish.api.jsnx.IDeviceBatchService;
import com.yihuacomputer.fish.api.person.IOrganization;
import com.yihuacomputer.fish.api.person.IOrganizationService;
import com.yihuacomputer.fish.api.person.IPerson;
import com.yihuacomputer.fish.api.person.IUser;
import com.yihuacomputer.fish.api.person.IUserLog;
import com.yihuacomputer.fish.api.person.IUserLogService;
import com.yihuacomputer.fish.api.person.IUserService;
import com.yihuacomputer.fish.api.person.OrganizationLevel;
import com.yihuacomputer.fish.api.person.OrganizationState;
import com.yihuacomputer.fish.api.person.UserSession;
import com.yihuacomputer.fish.api.relation.IDevicePersonRelation;
import com.yihuacomputer.fish.jsnx.entity.atmp.DeviceAtmp;
import com.yihuacomputer.fish.jsnx.entity.atmp.DeviceQuery;
import com.yihuacomputer.fish.jsnx.entity.atmp.DeviceUnique;
import com.yihuacomputer.fish.jsnx.service.AtmpService;
import com.yihuacomputer.fish.monitor.service.db.XfsService;
import com.yihuacomputer.fish.person.entity.Organization;
import com.yihuacomputer.fish.web.basic.format.device.AtmTypeForm;
import com.yihuacomputer.fish.web.basic.format.device.DeviceForm;
import com.yihuacomputer.fish.web.basic.format.device.DeviceStatusForm;
import com.yihuacomputer.fish.web.basic.format.person.PersonForm;
import com.yihuacomputer.fish.web.util.DownFromWebUtils;

/**
 * 设备信息 Controller类
 * 
 * @author liubo
 * @E-mail liubo-nj@yihuacomputer
 * @date 2014-7-1
 */
@Controller
@RequestMapping("/machine/device")
public class DeviceController {

	private Logger logger = LoggerFactory.getLogger(DeviceController.class);

	/**
	 * 设备接口
	 */
	@Autowired
	private IDeviceService deviceService;

	@Autowired
	private IDeviceExtendService deviceExtendService;

	/**
	 * 机构接口
	 */
	@Autowired
	private IOrganizationService orgService;

	/**
	 * 型号接口
	 */
	@Autowired
	private IAtmTypeService typeService;

	@Autowired
	private IUserService userService;

	@Autowired
	private IDevicePersonRelation devicePersonRelation;

	@Autowired
	private AtmpService atmpService;

	@Autowired
	private XfsService xfsService;

	@Autowired
	private IUserLogService logService;

	@Autowired
	private IDeviceMaintainOrgService deviceMaintainOrgService;

	@Autowired
	private IDeviceBatchService deviceBatchService;

	@PostConstruct
	public void init() {
	}

	

	/**
	 * 下载导入文件模板：
	 */
	@RequestMapping(value = "/downloadMould", method = RequestMethod.GET)
	public void downloadMould(HttpServletRequest request, HttpServletResponse response) throws Exception {
		String path = request.getSession().getServletContext().getRealPath("resources/file/jsnx_device.xls");
		File file = new File(path);
		response.setHeader("Content-Disposition", "attachment; filename=\"" + DownFromWebUtils.encoderFileName(request, "jsnx_device.xls") + "\"");
		response.addHeader("Content-Length", "" + file.length());
		response.setContentType("application/x-msdownload;charset=UTF-8");
		OutputStream out = null;
		RandomAccessFile randomFile = new RandomAccessFile(file, "r");
		try {
			out = response.getOutputStream();
			int len = 0;
			long contentLength = 0;
			contentLength = contentLength + randomFile.length();
			randomFile.seek(0);
			byte[] cache = new byte[1024];
			while ((len = randomFile.read(cache)) != -1) {
				out.write(cache, 0, len);
				contentLength += len;
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		} finally {
			if (out != null) {
				out.close();
			}
			if (randomFile != null) {
				randomFile.close();
			}
		}
		request.getSession().setAttribute("operContent", "path=" + path);
	}

	/**
	 * 设备信息导入
	 */
	@RequestMapping(value = "/importMould", method = RequestMethod.POST)
	@ResponseBody
	public String importMould(HttpServletRequest request, HttpServletResponse response, HttpServletRequest req) {
		response.setContentType("text/html;charset=UTF-8");// 解决IE9 上传文件乱码问题
		MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
		List<MultipartFile> files = multipartRequest.getFiles("file");
		MultipartFile file = files.get(0);
		if (!file.getOriginalFilename().isEmpty() && file.getSize() > 10485760) {
			return "{'success':false,'content':'超过最大文件大小限制（最大10M）'}";
		}
		String fileType = file.getOriginalFilename().substring(file.getOriginalFilename().lastIndexOf('.'));
		if (!((file.getOriginalFilename().equals("jsnx_device.xls")) || (file.getOriginalFilename().equals("jsnx_device.xlsx")))) {
			return "{'success':false,'content':'模板格式或名称不正确，请使用模板文件导入！'}";
		}
		// 用于记录重复的终端号
		String terminalIdStr = "";
		// 用于记录成功的行数
		int successRows = 0;
		// excel表中总行数
		int allRows = 0;
		// 用于记录重复未导入的行数
		int repeat = 0;
		// 用于存放验证成功的设备
		List<IDevice> devices = new ArrayList<IDevice>();
		Workbook xls = null;
		if (!file.getOriginalFilename().isEmpty()) {
			try {
				File readFile = new File(FishCfg.getTempDir() + System.getProperty("file.separator") + UUID.randomUUID());
				file.transferTo(readFile);
				// 从excel文件解析数据：
				if (fileType.equals(".xls")) {
					xls = new HSSFWorkbook(new FileInputStream(readFile));// 指定文件
				} else if (fileType.equals(".xlsx")) {
					xls = new XSSFWorkbook(new FileInputStream(readFile));// 指定文件
				} else {
					return "{'success':false,'content':'文件类型不符合要求'}";
				}
				Sheet sheet = xls.getSheetAt(0);
				int rows = sheet.getPhysicalNumberOfRows();// 行数
				allRows = rows;
				if (rows <= 1) {
					return "{'success':false,'content':'文件内容不能为空！请检查！'}";
				}

				for (int r = 1; r < rows; r++) {
					Row row = (Row) sheet.getRow(r);
					if (row == null) {
						continue;
					}
					IDevice device = deviceService.make();
					IDeviceExtend deviceExtend = deviceExtendService.make();

					Cell serCell0 = (Cell) row.getCell(0);
					Cell serCell1 = (Cell) row.getCell(1);
					Cell serCell2 = (Cell) row.getCell(2);
					Cell serCell3 = (Cell) row.getCell(3);
					Cell serCell4 = (Cell) row.getCell(4);
					Cell serCell5 = (Cell) row.getCell(5);
					Cell serCell6 = (Cell) row.getCell(6);
					Cell serCell7 = (Cell) row.getCell(7);
					Cell serCell8 = (Cell) row.getCell(8);
					Cell serCell9 = (Cell) row.getCell(9);
					Cell serCell10 = (Cell) row.getCell(10);
					Cell serCell11 = (Cell) row.getCell(11);
					Cell serCell12 = (Cell) row.getCell(12);
					Cell serCell13 = (Cell) row.getCell(13);
					Cell serCell14 = (Cell) row.getCell(14);
					Cell serCell15 = (Cell) row.getCell(15);
					Cell serCell16 = (Cell) row.getCell(16);
					Cell serCell17 = (Cell) row.getCell(17);
					Cell serCell18 = (Cell) row.getCell(18);
					Cell serCell19 = (Cell) row.getCell(19);
					Cell serCell20 = (Cell) row.getCell(20);
					Cell serCell21 = (Cell) row.getCell(21);
					Cell serCell22 = (Cell) row.getCell(22);
					Cell serCell23 = (Cell) row.getCell(23);
					Cell serCell24 = (Cell) row.getCell(24);
					Cell serCell25 = (Cell) row.getCell(25);
					Cell serCell26 = (Cell) row.getCell(26);
					Cell serCell27 = (Cell) row.getCell(27);
					Cell serCell28 = (Cell) row.getCell(28);
					Cell serCell29 = (Cell) row.getCell(29);
					Cell serCell30 = (Cell) row.getCell(30);
					Cell serCell31 = (Cell) row.getCell(31);
					Cell serCell32 = (Cell) row.getCell(32);
					Cell serCell33 = (Cell) row.getCell(33);
					Cell serCell34 = (Cell) row.getCell(34);
					Cell serCell35 = (Cell) row.getCell(35);
					Cell serCell36 = (Cell) row.getCell(36);
					Cell serCell37 = (Cell) row.getCell(37);
					Cell serCell38 = (Cell) row.getCell(38);
					Cell serCell39 = (Cell) row.getCell(39);
					Cell serCell40 = (Cell) row.getCell(40);
					Cell serCell41 = (Cell) row.getCell(41);
					Cell serCell42 = (Cell) row.getCell(42);
					Cell serCell43 = (Cell) row.getCell(43);
					Cell serCell44 = (Cell) row.getCell(44);
					Cell serCell45 = (Cell) row.getCell(45);
					Cell serCell46 = (Cell) row.getCell(46);
					Cell serCell47 = (Cell) row.getCell(47);
					Cell serCell48 = (Cell) row.getCell(48);
					Cell serCell49 = (Cell) row.getCell(49);
					Cell serCell50 = (Cell) row.getCell(50);
					Cell serCell51 = (Cell) row.getCell(51);
					Cell serCell52 = (Cell) row.getCell(52);
					Cell serCell53 = (Cell) row.getCell(53);
					Cell serCell54 = (Cell) row.getCell(54);
					Cell serCell55 = (Cell) row.getCell(55);
					Cell serCell56 = (Cell) row.getCell(56);
					Cell serCell57 = (Cell) row.getCell(57);
					Cell serCell58 = (Cell) row.getCell(58);
					Cell serCell59 = (Cell) row.getCell(59);
					Cell serCell60 = (Cell) row.getCell(60);
					Cell serCell61 = (Cell) row.getCell(61);
					Cell serCell62 = (Cell) row.getCell(62);
					Cell serCell63 = (Cell) row.getCell(63);
					Cell serCell64 = (Cell) row.getCell(64);
					Cell serCell65 = (Cell) row.getCell(65);
					Cell serCell66 = (Cell) row.getCell(66);

					// 验证必填项是否为空
					if (serCell0 == null || serCell1 == null || serCell2 == null || serCell3 == null || serCell4 == null || serCell5 == null || serCell6 == null || serCell7 == null || serCell8 == null || serCell9 == null || serCell10 == null || serCell11 == null || serCell12 == null || serCell13 == null || serCell14 == null || serCell15 == null || serCell16 == null || serCell17 == null
							|| serCell18 == null || serCell19 == null) {
						return "{'success':false,'content':'文件中" + (r + 1) + "行标记绿的列存在空项！请检查！'}";
					}

					// 终端号
					String terminalId = changeToString(serCell1);
					String regex4 = "[a-zA-Z0-9]{8}+$";
					if (!isMate(regex4, terminalId)) {
						return "{'success':false,'content':'文件第" + (r + 1) + "行[终端号]由8位数字‘0-9’或者字母‘a-zA-Z’组成，请检查！'}";
					}
					// 如果该终端号已经对应了设备，我们则认为这是一条重复的数据，不做处理
					IDevice checkDevice = deviceService.get(terminalId);
					if (null != checkDevice) {
						terminalIdStr += terminalId + ",";
						repeat++;
						continue;
					}

					// 虚拟柜员号
					String virtual = changeToString(serCell0);
					if (virtual.length() > 12) {
						return "{'success':false,'content':'文件第" + (r + 1) + "行[虚拟柜员号]超出最大长度限制(12位)，请检查！'}";
					}
					String regex = "^[0-9][0-9A-Z]+$";
					if (!isMate(regex, virtual)) {
						return "{'success':false,'content':'文件第" + (r + 1) + "行[虚拟柜员号]由数字‘0-9’、字母‘A-Z’,只能以数字开头，请检查！'}";
					}
					String virtualOrg = virtual.substring(0, 9);
					IOrganization deviceOrg = orgService.getByCode(virtualOrg);
					if (deviceOrg == null) {
						return "{'success':false,'content':'文件第" + (r + 1) + "行[虚拟柜员号]对应的机构不存在，请检查！'}";
					}
					// 查询本地是否有虚拟柜员号信息。
					IDevice devVir = deviceService.getByVirtual(virtual);
					if (devVir != null) {
						if (devVir.getStatus() == Status.SCRAPPED) {
							return "{'success':false,'content':'文件第" + (r + 1) + "行[虚拟柜员号]信息已经报废，请检查！'}";
						} else {
							return "{'success':false,'content':'文件第" + (r + 1) + "行[虚拟柜员号]信息已存在，请检查！'}";
						}
					}

					// orgCode：机构码 orgName：机构名称
					String orgCode = changeToString(serCell2);
					String orgName = changeToString(serCell3);
					IOrganization organization = orgService.getByCode(orgCode);
					if (organization != null) {
						if (!(orgName.equals(organization.getName()))) {
							return "{'success':false,'content':'文件第" + (r + 1) + "行中[机构码]和[机构名称]不匹配，请检查！'}";
						}
						if (organization.getOrganizationState() != OrganizationState.START) {
							return "{'success':false,'content':'文件第" + (r + 1) + "行中[机构名称]为" + orgName + "的机构不是启用状态，请检查！'}";
						}
					} else {
						return "{'success':false,'content':'文件第" + (r + 1) + "行中不存在[机构码]为" + orgCode + "的机构，请检查！'}";
					}

					// 设备型号
					String str4 = changeToString(serCell4);
					IAtmType atmType = typeService.get(str4);
					if (atmType == null) {
						return "{'success':false,'content':'文件第" + (r + 1) + "行[设备型号]不存在，请检查！'}";
					}

					// 设备Ip
					String str5 = changeToString(serCell5);
					String[] ips = str5.split("\\.");
					if (ips.length == 4) {
						for (int i = 0; i < 4; i++) {
							try {
								int checkip = Integer.parseInt(ips[i]);
								if (checkip < 0 || checkip > 255) {
									return "{'success':false,'content':'文件第" + (r + 1) + "行[设备ip地址]数字不能小于0大于255,请检查！'}";
								} else if (deviceService.getByIp(str5) != null) {
									return "{'success':false,'content':'文件第" + (r + 1) + "行[设备ip地址]已经被其他设备占用,请检查！'}";
								}
							} catch (NumberFormatException e) {
								return "{'success':false,'content':'文件第" + (r + 1) + "行[设备ip地址]只能由数字和点组合,请检查！'}";
							}
						}
					} else {
						return "{'success':false,'content':'文件第" + (r + 1) + "行[设备ip地址]输入有误,请检查！'}";
					}
					ITypeIP ip = new IP(str5);

					// 银联地区标识码
					String obCode = changeToString(serCell6);
					String regex5 = "[0-9]{8}+$";
					if (!isMate(regex5, obCode)) {
						return "{'success':false,'content':'文件第" + (r + 1) + "行[银联地区标识码]由8位数字‘0-9’组成，请检查！'}";
					}

					// MAC地址
					String mac = changeToString(serCell7);
					if (deviceService.getByMac(mac) != null) {
						return "{'success':false,'content':'文件第" + (r + 1) + "行[MAC地址]已经被其他设备使用,请检查！'}";
					}
					String regex2 = "^[a-fA-F0-9]{2}-[a-fA-F0-9]{2}-[a-fA-F0-9]{2}-[a-fA-F0-9]{2}-[a-fA-F0-9]{2}-[a-fA-F0-9]{2}+$";
					if (!isMate(regex2, mac)) {
						return "{'success':false,'content':'文件第" + (r + 1) + "行[MAC地址]输入不符合规范，请检查！'}";
					}
					deviceExtend.setMac(mac);

					// 设备地址
					String address = changeToString(serCell8);
					if (address.length() > 30) {
						return "{'success':false,'content':'文件第" + (r + 1) + "行[设备地址]输入超过最大长度30，请检查！'}";
					}
					device.setAddress(address);

					// 设备维保商
					String str9 = changeToString(serCell9);
					IOrganization devService = null;
					try {
						devService = orgService.getByName(str9);
					} catch (NotFoundException e1) {
						return "{'success':false,'content':'文件第" + (r + 1) + "行[设备维保商]不存在，请检查！'}";
					}

					// 设备序列号
					String serial = changeToString(serCell10);
					if (!serial.isEmpty()) {
						String regexSerial = "^[0-9a-zA-Z][0-9a-zA-Z-_.]+$";
						if (!isMate(regexSerial, serial)) {
							return "{'success':false,'content':'文件第" + (r + 1) + "行[设备序列号]由字母‘a-z’或‘A-Z’、数字‘0-9’、减号‘-’、下划线‘_’和点号‘.’，只能以字母或数字开头，请检查！'}";
						}
					}

					// 所属省级区划代码
					String provDivisionCd = changeToString(serCell11);
					String regexDivisionCd = "^[0-9]{6}+$";
					if (!isMate(regexDivisionCd, provDivisionCd)) {
						return "{'success':false,'content':'文件第" + (r + 1) + "行[所属省级区划代码]由6位数字组成，请检查！'}";
					}

					// 所属市级区划代码
					String cityDivisionCd = changeToString(serCell12);
					if (!isMate(regexDivisionCd, cityDivisionCd)) {
						return "{'success':false,'content':'文件第" + (r + 1) + "行[所属市级区划代码]由6位数字组成，请检查！'}";
					}

					// 所属区级区划代码
					String areaDivisionCd = changeToString(serCell13);
					if (!isMate(regexDivisionCd, areaDivisionCd)) {
						return "{'success':false,'content':'文件第" + (r + 1) + "行[所属区级区划代码]由6位数字组成，请检查！'}";
					}

					// 邮政编码
					String zipCd = changeToString(serCell14);
					String regexZipCd = "^[0-9]{6}+$";
					if (!isMate(regexZipCd, zipCd)) {
						return "{'success':false,'content':'文件第" + (r + 1) + "行[邮政编码]由6位数字组成，请检查！'}";
					}

					// 部署区域特征
					String deployAreaChara = changeToString(serCell15);
					String regexDeployAreaChara = "^[0][1-8]{1}+$";
					if (!isMate(regexDeployAreaChara, deployAreaChara)) {
						return "{'success':false,'content':'文件第" + (r + 1) + "行[部署区域特征]由2位数字[01、02、03、04、05、06、07、08]组成，请检查！'}";
					}

					// 联接方式
					String connMd = changeToString(serCell16);
					if (!("I".equals(connMd) || "S".equals(connMd))) {
						return "{'success':false,'content':'文件第" + (r + 1) + "行[联接方式]只能输入[I]或[S]，请检查！'}";
					}

					// 操作系统版本
					String osVersion = changeToString(serCell17);
					if (osVersion.length() > 20) {
						return "{'success':false,'content':'文件第" + (r + 1) + "行[操作系统版本]超出最大长度限制(20位)，请检查！'}";
					}

					// 软件版本号
					String softVersion = changeToString(serCell18);
					if (softVersion.length() > 30) {
						return "{'success':false,'content':'文件第" + (r + 1) + "行[软件版本号]超出最大长度限制(30位)，请检查！'}";
					}

					// 设备状态
					Status devStatus = null;
					if (changeToString(serCell19).indexOf('(') == -1) {
						return "{'success':false,'content':'文件第" + (r + 1) + "行[设备状态]输入有误,请输入正确形式！例：[3(启用)]。！'}";
					} else {
						String str11 = changeToString(serCell19).substring(0, changeToString(serCell19).indexOf('('));
						String regexNumble = "^[0-9]{1,2}";
						if (!isMate(regexNumble, str11)) {
							return "{'success':false,'content':'文件第" + (r + 1) + "行[设备状态]输入有误,请输入正确形式！例：[3(启用)]。'}";
						}
						devStatus = Status.getById(Integer.parseInt(str11));
					}

					// 是否在行
					AwayFlag awayFlag = null;
					// 如果为空则给它一个默认值，否则判断值的合法性
					if (changeToString(serCell20).isEmpty()) {
						awayFlag = AwayFlag.FROM_THE_LINE;
					} else {
						if (changeToString(serCell20).indexOf('(') == -1) {
							return "{'success':false,'content':'文件第" + (r + 1) + "行[是否在行]输入有误,只能输入[1(在行自助服务区)]或者[2(离行自助银行)]或者[3(单机离行自助服务点)]！'}";
						} else {
							String str11 = changeToString(serCell20).substring(0, changeToString(serCell20).indexOf('('));
							if (!("1".equals(str11) || "2".equals(str11) || "3".equals(str11))) {
								return "{'success':false,'content':'文件第" + (r + 1) + "行[是否在行]输入有误,只能输入[1(在行自助服务区)]或者[2(离行自助银行)]或者[3(单机离行自助服务点)]！'}";
							}
							awayFlag = AwayFlag.getById(Integer.parseInt(str11));
						}
					}

					// 安装方式
					SetupType setupType = null;
					if (!changeToString(serCell21).isEmpty()) {
						if (changeToString(serCell21).indexOf('(') == -1) {
							return "{'success':false,'content':'文件第" + (r + 1) + "行[是否在行]输入有误,只能输入[1(在行自助服务区)]或者[2(离行自助银行)]或者[3(单机离行自助服务点)]！'}";
						} else {
							String str14 = changeToString(serCell21).substring(0, changeToString(serCell21).indexOf('('));
							if (!str14.isEmpty() && !("0".equals(str14) || "1".equals(str14))) {
								return "{'success':false,'content':'文件第" + (r + 1) + "行[安装方式]输入有误,只能输入[0(穿墙)]或者[1（大堂）]！'}";
							}
							setupType = SetupType.getById(Integer.parseInt(str14));
						}
					} else {
						setupType = SetupType.WEAR_WALL;
					}

					// 经营方式
					WorkType workType = null;
					if (!changeToString(serCell22).isEmpty()) {
						if (changeToString(serCell22).indexOf('(') == -1) {
							return "{'success':false,'content':'文件第" + (r + 1) + "行[经营方式]输入有误,只能输入[1(自营)]或者[2(合作)]或者[3(外包)]！'}";
						} else {
							String str15 = changeToString(serCell22).substring(0, changeToString(serCell22).indexOf('('));
							if (!str15.isEmpty() && !("1".equals(str15) || "2".equals(str15) || "3".equals(str15))) {
								return "{'success':false,'content':'文件第" + (r + 1) + "行[经营方式]输入有误,只能输入[1(自营)]或者[2(合作)]或者[3(外包)]！'}";
							}
							workType = WorkType.getById(Integer.parseInt(str15));
						}
					} else {
						workType = WorkType.FROM_OPERATING;
					}

					// 开机时间
					String openTime = changeToString(serCell23);
					if (openTime.isEmpty()) {
						deviceExtend.setOpenTime("00:00:00");
					} else {
						if (!checkTime(openTime)) {
							return "{'success':false,'content':'文件第" + (r + 1) + "行[开机时间]输入不符合时间格式，请检查！'}";
						}
						deviceExtend.setOpenTime(openTime);
					}

					// 关机时间
					String closeTime = changeToString(serCell24);
					if (closeTime.isEmpty()) {
						deviceExtend.setCloseTime("23:59:59");
					} else {
						if (!checkTime(closeTime)) {
							return "{'success':false,'content':'文件第" + (r + 1) + "行[关机时间]输入不符合时间格式，请检查！'}";
						}
						deviceExtend.setCloseTime(closeTime);
					}

					// 是否支持视频播放
					String videoType = changeToString(serCell25);
					if (videoType != "") {
						if (!("0".equals(videoType) || "1".equals(videoType))) {
							return "{'success':false,'content':'文件第" + (r + 1) + "行[是否支持视频播放]输入有误,只能输入0或1,请检查！'}";
						}
						deviceExtend.setVideoType(videoType);
					} else {
						deviceExtend.setVideoType("0");
					}

					// 设备关注程度
					CareLevel careLevel = null;
					if (!changeToString(serCell26).isEmpty()) {
						if (changeToString(serCell26).indexOf('(') == -1) {
							return "{'success':false,'content':'文件第" + (r + 1) + "行[设备关注程度]输入有误,只能输入[1(重点)]、[2（中等）]或者[3(一般)]！'}";
						} else {
							String str20 = changeToString(serCell26).substring(0, changeToString(serCell26).indexOf('('));
							if (!str20.isEmpty() && !("1".equals(str20) || "2".equals(str20) || "3".equals(str20))) {
								return "{'success':false,'content':'文件第" + (r + 1) + "行[设备关注程度]输入有误,只能输入[1(重点)]、[2（中等）]或者[3(一般)]！'}";
							}
							careLevel = CareLevel.getById(Integer.parseInt(str20));
						}
					} else {
						careLevel = CareLevel.EMPHASIS;
					}

					// 非现金标志
					CashType cashType = null;
					// 如果为空则给它一个默认值，否则判断值的合法性
					if (changeToString(serCell27).isEmpty()) {
						cashType = CashType.CASH;
					} else {
						if (changeToString(serCell27).indexOf('(') == -1) {
							return "{'success':false,'content':'文件第" + (r + 1) + "行[非现金标志]输入有误,只能输入[1（现金）]或者[2（非现金）]！'}";
						} else {
							String str10 = changeToString(serCell27).substring(0, changeToString(serCell27).indexOf('('));
							if (!("1".equals(str10) || "2".equals(str10))) {
								return "{'success':false,'content':'文件第" + (r + 1) + "行[非现金标志]输入有误,只能输入[1（现金）]或者[2（非现金）]！'}";
							}
							cashType = CashType.getById(Integer.parseInt(str10));
						}
					}

					// atmc软件
					String atmcSoft = changeToString(serCell28);
					if (atmcSoft.length() > 50) {
						return "{'success':false,'content':'文件第" + (r + 1) + "行[atmc软件]文本长度不能超过50，请检查！'}";
					}

					// 加钞机构
					String moneyOrg = changeToString(serCell29);
					if (moneyOrg.length() > 20) {
						return "{'success':false,'content':'文件第" + (r + 1) + "行[加钞机构]文本长度不能超过20位，请检查！'}";
					}

					// 厂商sp类型
					String sp = changeToString(serCell30);
					if (sp.length() > 50) {
						return "{'success':false,'content':'文件第" + (r + 1) + "行[厂商sp类型]文本长度不能超过50位，请检查！'}";
					}

					// 存放位置类型
					PlaceType placeType = null;
					if (!changeToString(serCell31).isEmpty()) {
						if (changeToString(serCell31).indexOf('(') == -1) {
							return "{'success':false,'content':'文件第" + (r + 1) + "行[布放位置类型]输入有误,只能输入[1(省会城市)]、[2（地级市）]、[3(县城)]、[4(乡镇)或[5(行政（自然）村)]]！'}";
						} else {
							String str25 = changeToString(serCell31).substring(0, changeToString(serCell31).indexOf('('));
							if (!str25.isEmpty() && !("1".equals(str25) || "2".equals(str25) || "3".equals(str25) || "4".equals(str25) || "5".equals(str25))) {
								return "{'success':false,'content':'文件第" + (r + 1) + "行[布放位置类型]输入有误,只能输入[1(省会城市)]、[2（地级市）]、[3(县城)]、[4(乡镇)或[5(行政（自然）村)]]！'}";
							}
							placeType = PlaceType.getById(Integer.parseInt(str25));
						}
					} else {
						placeType = PlaceType.PRO_CAP;
					}

					// 管理员电话
					String managerPhone = changeToString(serCell32);
					String regex6 = "^[0-9]{8,11}";
					if (!isMate(regex6, managerPhone) && !managerPhone.isEmpty()) {
						return "{'success':false,'content':'文件第" + (r + 1) + "行[管理员电话]只能输入8-11位数字，请检查！'}";
					}

					// 管理员姓名
					String managerName = changeToString(serCell33);
					if (managerPhone.length() > 10) {
						return "{'success':false,'content':'文件第" + (r + 1) + "行[管理员姓名]文本长度不能超过10，请检查！'}";
					}

					// 设备购买日期
					String buyDate = changeToString(serCell34);
					if (!buyDate.isEmpty()) {
						try {
							deviceExtend.setBuyDate(DateUtils.getDate(buyDate));
						} catch (AppException e) {
							return "{'success':false,'content':'文件第" + (r + 1) + "行[设备购买日期]格式输入错误，请输入“yyyy-mm-dd”格式的时间！'}";
						}
					}

					// 设备安装日期
					String installDate = changeToString(serCell35);
					if (!installDate.isEmpty()) {
						try {
							deviceExtend.setInstallDate(DateUtils.getDate(installDate));
						} catch (AppException e) {
							return "{'success':false,'content':'文件第" + (r + 1) + "行[设备安装日期]格式输入错误，请输入“yyyy-mm-dd”格式的时间！'}";
						}
					}

					// 设备启用日期
					String startDate = changeToString(serCell36);
					if (!startDate.isEmpty()) {
						try {
							deviceExtend.setStartDate(DateUtils.getDate(startDate));
						} catch (AppException e) {
							return "{'success':false,'content':'文件第" + (r + 1) + "行[设备启用日期]格式输入错误，请输入“yyyy-mm-dd”格式的时间！'}";
						}
					}

					// 设备停用日期
					String stopDate = changeToString(serCell37);
					if (!stopDate.isEmpty()) {
						try {
							deviceExtend.setStopDate(DateUtils.getDate(stopDate));
						} catch (AppException e) {
							return "{'success':false,'content':'文件第" + (r + 1) + "行[设备启用日期]格式输入错误，请输入“yyyy-mm-dd”格式的时间！'}";
						}
					}

					// 保修到期日期
					String expireDate = changeToString(serCell38);
					if (!expireDate.isEmpty()) {
						try {
							deviceExtend.setExpireDate(DateUtils.getDate(expireDate));
						} catch (AppException e) {
							return "{'success':false,'content':'文件第" + (r + 1) + "行[保修到期日期]格式输入错误，请输入“yyyy-mm-dd”格式的时间！'}";
						}
					}

					// 上次巡检日期
					String lastPmDate = changeToString(serCell39);
					if (!lastPmDate.isEmpty()) {
						try {
							deviceExtend.setLastPmDate(DateUtils.getDate(lastPmDate));
						} catch (AppException e) {
							return "{'success':false,'content':'文件第" + (r + 1) + "行[上次巡检日期]格式输入错误，请输入“yyyy-mm-dd”格式的时间！'}";
						}
					}

					// 巡检到期日期
					String expirePmDate = changeToString(serCell40);
					if (!expirePmDate.isEmpty()) {
						try {
							deviceExtend.setExpirePmDate(DateUtils.getDate(expirePmDate));
						} catch (AppException e) {
							return "{'success':false,'content':'文件第" + (r + 1) + "行[巡检到期日期]格式输入错误，请输入“yyyy-mm-dd”格式的时间！'}";
						}
					}

					// 巡检周期
					String patrolPeriod = changeToString(serCell41);
					if (!patrolPeriod.isEmpty()) {
						try {
							deviceExtend.setPatrolPeriod(Integer.parseInt(patrolPeriod));
						} catch (NumberFormatException e) {
							return "{'success':false,'content':'文件第" + (r + 1) + "行[巡检周期]输入的不是一个大于0的整数！'}";
						}
					}

					// 入账成本
					String price = changeToString(serCell42);
					if (!price.isEmpty()) {
						try {
							deviceExtend.setPrice(Double.parseDouble(price));
						} catch (NumberFormatException e) {
							return "{'success':false,'content':'文件第" + (r + 1) + "行[入账成本]输入的不是一个小数！'}";
						}
					}

					// 物业租赁费用
					String governanceRent = changeToString(serCell43);
					if (!governanceRent.isEmpty()) {
						try {
							deviceExtend.setGovernanceRent(Double.parseDouble(governanceRent));
						} catch (NumberFormatException e) {
							return "{'success':false,'content':'文件第" + (r + 1) + "行[物业租赁费用]输入的不是一个小数！'}";
						}
					}

					// 物业管理费用
					String governanceCost = changeToString(serCell44);
					if (!governanceCost.isEmpty()) {
						try {
							deviceExtend.setGovernanceCost(Double.parseDouble(governanceCost));
						} catch (NumberFormatException e) {
							return "{'success':false,'content':'文件第" + (r + 1) + "行[物业管理费用]输入的不是一个小数！'}";
						}
					}

					// 折旧年限
					String depreciationLife = changeToString(serCell45);
					if (!depreciationLife.isEmpty()) {
						try {
							deviceExtend.setDepreciationLife(Double.parseDouble(depreciationLife));
						} catch (NumberFormatException e) {
							return "{'success':false,'content':'文件第" + (r + 1) + "行[折旧年限]输入的不是一个小数！'}";
						}
					}

					// 通讯线路费用
					String netCost = changeToString(serCell46);
					if (!netCost.isEmpty()) {
						try {
							deviceExtend.setNetCost(Double.parseDouble(netCost));
						} catch (NumberFormatException e) {
							return "{'success':false,'content':'文件第" + (r + 1) + "行[通讯线路费用]输入的不是一个小数！'}";
						}
					}

					// 装修费用
					String decoration = changeToString(serCell47);
					if (!decoration.isEmpty()) {
						try {
							deviceExtend.setDecoration(Double.parseDouble(decoration));
						} catch (NumberFormatException e) {
							return "{'success':false,'content':'文件第" + (r + 1) + "行[装修费用]输入的不是一个小数！'}";
						}
					}

					// 电费
					String powerCost = changeToString(serCell48);
					if (!powerCost.isEmpty()) {
						try {
							deviceExtend.setPowerCost(Double.parseDouble(powerCost));
						} catch (NumberFormatException e) {
							return "{'success':false,'content':'文件第" + (r + 1) + "行[电费]输入的不是一个小数！'}";
						}
					}

					// 装修摊销年限（年）
					String decorationCost = changeToString(serCell49);
					if (!decorationCost.isEmpty()) {
						try {
							deviceExtend.setDecorationCost(Double.parseDouble(decorationCost));
						} catch (NumberFormatException e) {
							return "{'success':false,'content':'文件第" + (r + 1) + "行[装修摊销年限]输入的不是一个小数！'}";
						}
					}

					// 加钞维护费用
					String moneyCost = changeToString(serCell50);
					if (!moneyCost.isEmpty()) {
						try {
							deviceExtend.setMoneyCost(Double.parseDouble(moneyCost));
						} catch (NumberFormatException e) {
							return "{'success':false,'content':'文件第" + (r + 1) + "行[加钞维护费用]输入的不是一个小数！'}";
						}
					}

					// 资金成本利率
					String costInterest = changeToString(serCell51);
					deviceExtend.setCostInterest(costInterest);

					// 部署区域名称
					String deployAreaNm = changeToString(serCell52);
					if (deployAreaNm.length() > 33) {
						return "{'success':false,'content':'文件第" + (r + 1) + "行[部署区域名称]超出最大长度限制(33位)，请检查！'}";
					}

					// 设备投资方代码
					String invstrInsIdCd = changeToString(serCell53);
					if (invstrInsIdCd.length() > 8) {
						return "{'success':false,'content':'文件第" + (r + 1) + "行[设备投资方代码]超出最大长度限制(8位)，请检查！'}";
					}

					// 运行维护方代码
					String maintnInsIdCd = changeToString(serCell54);
					if (maintnInsIdCd.length() > 8) {
						return "{'success':false,'content':'文件第" + (r + 1) + "行[运行维护方代码]超出最大长度限制(8位)，请检查！'}";
					}

					// 外卡受理
					String frnAcptTp = changeToString(serCell55);
					if (!frnAcptTp.isEmpty()) {
						if (!("01".equals(frnAcptTp) || "02".equals(frnAcptTp) || "03".equals(frnAcptTp))) {
							return "{'success':false,'content':'文件第" + (r + 1) + "行[外卡受理]只能输入[01]、[02]、[03]，请检查！'}";
						}
					}

					// 终端渠道宣传
					String termPublicizeChnl = changeToString(serCell56);
					if (termPublicizeChnl.length() > 33) {
						return "{'success':false,'content':'文件第" + (r + 1) + "行[终端渠道宣传]超出最大长度限制(33位)，请检查！'}";
					}

					// 终端通讯方式
					String termConnMd = changeToString(serCell57);
					if (termConnMd.length() > 33) {
						return "{'success':false,'content':'文件第" + (r + 1) + "行[终端通讯方式]超出最大长度限制(33位)，请检查！'}";
					}

					// 扫码功能
					String scanIn = changeToString(serCell58);
					if (!scanIn.isEmpty() && !("0".equals(scanIn) || "1".equals(scanIn))) {
						return "{'success':false,'content':'文件第" + (r + 1) + "行[扫码功能]只能输入[0]或[1]，请检查！'}";
					}

					// 磁条卡读取功能
					String magnReadIn = changeToString(serCell59);
					if (!scanIn.isEmpty() && !("0".equals(magnReadIn) || "1".equals(magnReadIn))) {
						return "{'success':false,'content':'文件第" + (r + 1) + "行[磁条卡读取功能]只能输入[0]或[1]，请检查！'}";
					}

					// 接触式IC卡读取功能
					String contICIn = changeToString(serCell60);
					if (!scanIn.isEmpty() && !("0".equals(contICIn) || "1".equals(contICIn))) {
						return "{'success':false,'content':'文件第" + (r + 1) + "行[接触式IC卡读取功能]只能输入[0]或[1]，请检查！'}";
					}

					// 非接IC卡读取功能
					String contlessIcIn = changeToString(serCell61);
					if (!scanIn.isEmpty() && !("0".equals(contlessIcIn) || "1".equals(contlessIcIn))) {
						return "{'success':false,'content':'文件第" + (r + 1) + "行[非接IC卡读取功能]只能输入[0]或[1]，请检查！'}";
					}

					// 无卡支付功能
					String ncardPayIn = changeToString(serCell62);
					if (!scanIn.isEmpty() && !("0".equals(ncardPayIn) || "1".equals(ncardPayIn))) {
						return "{'success':false,'content':'文件第" + (r + 1) + "行[无卡支付功能]只能输入[0]或[1]，请检查！'}";
					}

					// 取款箱报警张数
					String cashboxLimit = changeToString(serCell63);
					if (!cashboxLimit.isEmpty()) {
						try {
							device.setCashboxLimit(Integer.parseInt(cashboxLimit));
						} catch (NumberFormatException e) {
							return "{'success':false,'content':'文件第" + (r + 1) + "[取款箱报警张数]输入的不是数字，请检查！'}";
						}
					}

					// 存款箱报警张数
					String cashboxDeposit = changeToString(serCell64);
					if (!cashboxDeposit.isEmpty()) {
						try {
							device.setCashboxDeposit(Integer.parseInt(cashboxDeposit));
						} catch (NumberFormatException e) {
							return "{'success':false,'content':'文件第" + (r + 1) + "[存款箱报警张数]输入的不是数字，请检查！'}";
						}
					}

					// 终端业务功能
					String termTranFun = changeToString(serCell65);
					if (termTranFun.length() > 33) {
						return "{'success':false,'content':'文件第" + (r + 1) + "行[终端业务功能]超出最大长度限制(33位)，请检查！'}";
					}

					// 运营商
					String carrier = changeToString(serCell66);
					if (carrier.length() > 20) {
						return "{'success':false,'content':'文件第" + (r + 1) + "行[运营商]文本长度不能超过20，请检查！'}";
					}

					UserSession userSession = (UserSession) request.getSession().getAttribute("SESSION_USER");
					IUser person = userService.get(userSession.getUserId());

					deviceExtend.setVirtual(virtual);
					deviceExtend.setObCode(obCode);
					deviceExtend.setSerial(serial);
					deviceExtend.setCarrier(carrier);
					deviceExtend.setMoneyOrg(moneyOrg);
					deviceExtend.setPlaceType(placeType);
					deviceExtend.setManagerPhone(managerPhone);
					deviceExtend.setManagerName(managerName);
					deviceExtend.setApplyId(person);
					deviceExtend.setApplyTime(new Date());
					deviceExtend.setApplyRemark("数据导入");
					deviceExtend.setTermConnMd(termConnMd);
					deviceExtend.setScanIn(scanIn);
					deviceExtend.setMagnReadIn(magnReadIn);
					deviceExtend.setContICIn(contICIn);
					deviceExtend.setContlessIcIn(contlessIcIn);
					deviceExtend.setNcardPayIn(ncardPayIn);
					deviceExtend.setTermTranFun(termTranFun);
					deviceExtend.setSoftVersion(softVersion);
					deviceExtend.setOsVersion(osVersion);
					deviceExtend.setConnMd(connMd);
					deviceExtend.setProvDivisionCd(provDivisionCd);
					deviceExtend.setCityDivisionCd(cityDivisionCd);
					deviceExtend.setAreaDivisionCd(areaDivisionCd);
					deviceExtend.setZipCd(zipCd);
					deviceExtend.setDeployAreaChara(deployAreaChara);
					deviceExtend.setDeployAreaNm(deployAreaNm);
					deviceExtend.setInvstrInsIdCd(invstrInsIdCd);
					deviceExtend.setMaintnInsIdCd(maintnInsIdCd);
					deviceExtend.setFrnAcptTp(frnAcptTp);
					deviceExtend.setTermPublicizeChnl(termPublicizeChnl);

					device.setTerminalId(terminalId);
					device.setOrganization(organization);
					device.setDevType(atmType);
					device.setCashType(cashType);
					device.setIp(ip);
					device.setAwayFlag(awayFlag);
					device.setDevService(devService);
					device.setSetupType(setupType);
					device.setWorkType(workType);
					device.setCareLevel(careLevel);
					device.setAtmcSoft(atmcSoft);
					device.setSp(sp);
					device.setStatus(devStatus);
					device.setDeviceExtend(deviceExtend);

					try {
						devices.add(device);
					} catch (Exception e) {
						logger.error(String.format("后台处理出错,错误码[%s]", e));
					}
				}

				// 当所有记录验证都通过时，则验证excel文件中记录是否有重复虚拟柜员号、终端号、ip、mac地址
				// 该处算法设计思想：excel中第一条设备信息不管，第二条开始与第一条比较，第三条与第一条、第二条比较，以此类推。
				for (int i = 0; i < devices.size(); i++) {
					for (int j = 0; j < i; j++) {
						if (i > 0) {
							if (devices.get(i).getDeviceExtend().getVirtual().equals(devices.get(j).getDeviceExtend().getVirtual())) {
								return "{'success':false,'content':'文件第" + (j + 1) + "行和第" + (i + 1) + "行虚拟柜员号相同，请检查！'}";
							}
							if (devices.get(i).getTerminalId().equals(devices.get(j).getTerminalId())) {
								return "{'success':false,'content':'文件第" + (j + 1) + "行和第" + (i + 1) + "行终端号相同，请检查！'}";
							}
							if (devices.get(i).getIp().equals(devices.get(j).getIp())) {
								return "{'success':false,'content':'文件第" + (j + 1) + "行和第" + (i + 1) + "行ip相同，请检查！'}";
							}
							if (devices.get(i).getDeviceExtend().getMac().equals(devices.get(j).getDeviceExtend().getMac())) {
								return "{'success':false,'content':'文件第" + (j + 1) + "行和第" + (i + 1) + "行MAC地址相同，请检查！'}";
							}
						}
					}
				}

				for (IDevice device : devices) {
					try {
						deviceService.add(device);
						successRows++;
					} catch (Exception e) {
						logger.error(String.format("后台处理出错,错误码[%s]", e));
						return "{'success':false,'content':'成功导入" + successRows + "条，但在第" + (successRows + 2) + "行发生异常！'}";
					}
				}
				if (allRows - successRows - 1 == 0) {
					return "{'success':true,'content':'导入成功" + successRows + "条," + "重复未导入:" + repeat + "条.失败:" + (allRows - successRows - 1 - repeat) + "'}";
				} else {
					return "{'success':true,'content':'导入成功" + successRows + "条," + "重复未导入:" + repeat + "条.失败:" + (allRows - successRows - 1 - repeat) + "条.重复的终端号为" + terminalIdStr.substring(0, terminalIdStr.length() - 1) + "。'}";
				}
			} catch (Exception ex) {
				logger.error(String.format("后台处理出错,错误码[%s]", ex));
				return "{'success':false,'content':'后台程序出现异常！'}";
			}
		}
		return "{'success':true}";
	}

	/**
	 * 将Cell对象转换成String类型（导入时调用）
	 */
	public String changeToString(Cell cell) {
		String strCell = "";
		if (cell != null) {
			switch (cell.getCellType()) {
			case Cell.CELL_TYPE_FORMULA:
				break;
			case Cell.CELL_TYPE_NUMERIC:
				strCell = String.valueOf((long) cell.getNumericCellValue());
				break;
			case Cell.CELL_TYPE_STRING:
				strCell = cell.getStringCellValue();
				break;
			default:
			}
		}
		return strCell;
	}

	/**
	 * 判断是否匹配正则表达式
	 * 
	 * @param regex
	 * @param targetSting
	 * @return
	 */
	public Boolean isMate(String regex, String targetSting) {
		Pattern p = Pattern.compile(regex);
		Matcher m = p.matcher(targetSting);
		if (m.matches()) {
			return true;
		} else {
			return false;
		}
	}

	public Boolean checkTime(String time) {
		String[] times = time.split(":");
		if (times.length != 3) {
			return false;
		} else {
			try {
				if (Integer.parseInt(times[0]) < 0 || Integer.parseInt(times[0]) > 23) {
					return false;
				}
				if ((Integer.parseInt(times[1]) < 0 || Integer.parseInt(times[1]) > 59) || (Integer.parseInt(times[2]) < 0 || Integer.parseInt(times[2]) > 59)) {
					return false;
				}
			} catch (NumberFormatException e) {
				return false;
			}
		}
		return true;
	}
}
